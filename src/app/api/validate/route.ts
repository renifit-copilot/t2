import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { verifyTelegramInitData } from '@/core/telegram/validateInitData';
import { db } from '@/db';
import { users, accessCodes } from '@/db/schema';
import { eq } from 'drizzle-orm';
import type { InferSelectModel } from 'drizzle-orm';

export async function POST(req: Request) {
  const { initData, code } = await req.json();

  let data;
  try {
    data = verifyTelegramInitData(initData);
  } catch {
    return NextResponse.json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram initData' }, { status: 400 });
  }

  const tgId = data.user?.id.toString();
  const username = data.user?.username || '';
  const fullName = `${data.user?.first_name || ''} ${data.user?.last_name || ''}`.trim();

  if (!tgId) return NextResponse.json({ error: '–ù–µ—Ç Telegram ID' }, { status: 400 });

  const existingUser = await db.query.users.findFirst({
    where: (u, { eq }) => eq(u.telegramId, tgId),
  });

  const cookieOptions = {
    httpOnly: true,
    secure: true,
    sameSite: 'strict' as const,
    maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
    path: '/', // üî• –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è middleware!
  };

  if (existingUser) {
    const response = NextResponse.json({ 
      success: true, 
      role: existingUser.role,
      groupCode: existingUser.groupCode 
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response.cookies.set('role', existingUser.role, cookieOptions);
    response.cookies.set('tgId', tgId, cookieOptions);
    if (existingUser.groupCode) {
      response.cookies.set('groupCode', existingUser.groupCode, cookieOptions);
    }

    return response;
  }

  // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!code) {
    const existingUser: InferSelectModel<typeof users> | undefined = await db.query.users.findFirst({
      where: (u, { eq }) => eq(u.telegramId, tgId),
    });
    if (!existingUser) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', tgId }, { status: 404 });
    }

    const response = NextResponse.json({
      success: true,
      role: existingUser.role,
      groupCode: existingUser.groupCode ?? null,
      tgId,
    });

    response.cookies.set('role', existingUser.role, cookieOptions);
    response.cookies.set('tgId', tgId, cookieOptions);
    if (existingUser.groupCode) {
      response.cookies.set('groupCode', existingUser.groupCode, cookieOptions);
    }

    return response;
  }


  // –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥
  const access = await db.query.accessCodes.findFirst({
    where: (c, { eq }) => eq(c.code, code),
  });

  if (!access) {
    return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞' }, { status: 401 });
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await db.insert(users).values({
    telegramId: tgId,
    username,
    fullName,
    role: access.role,
    groupCode: access.groupCode ?? null,
  });

  const response = NextResponse.json({ 
    success: true, 
    role: access.role,
    groupCode: access.groupCode ?? null 
  });

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  response.cookies.set('role', access.role, cookieOptions);
  response.cookies.set('tgId', tgId, cookieOptions);
  if (access.groupCode) {
    response.cookies.set('groupCode', access.groupCode, cookieOptions);
  }

  return response;
}
